(*********************************************)
(*           06. Working with maps           *)
(*********************************************)
(*  Uncomment specific code regions to try.  *)
(*********************************************)
(*            How to run it:                 *)
(* $SCILLA_HOME/bin/type-checker file.scilla *)
(* $SCILLA_HOME/bin/eval-runner  file.scilla *)
(*********************************************)

(**********************************************)
(* Creating an empty map from Int32 to String *)
(**********************************************)

(* let m = Emp Int32 String *)
(* in m *)

(*****************************)
(* Putting elements to a map *)
(*****************************)

(* let m = Emp Int32 String in *)
(* let k1 = Int32 42 in *)
(* let v1 = "abc" in *)
(* let m1 = builtin put m k1 v1 in *)
(* m1 *)

(*******************************)
(* Getting elements from a map *)
(*******************************)

(* let m = Emp Int32 String in *)
(* let k1 = Int32 42 in *)
(* let v1 = "abc" in *)
(* let k2 = Int32 43 in *)
(* let v2 = "def" in *)
(* let m1 = builtin put m k1 v1 in *)
(* let m2 = builtin put m1 k2 v2 in *)
(* builtin get m2 k1 *)

(****************************************)
(* Checking if an element is in the map *)
(****************************************)

(* let m = Emp Int32 String in *)
(* let k1 = Int32 42 in *)
(* let v1 = "abc" in *)
(* let k2 = Int32 43 in *)
(* let v2 = "def" in *)
(* let m1 = builtin put m k1 v1 in *)
(* let m2 = builtin put m1 k2 v2 in *)
(* builtin contains m2 k2 *)

(***************)
(* Map to list *)
(***************)

(* let m = Emp Int32 String in *)
(* let k1 = Int32 42 in *)
(* let v1 = "abc" in *)
(* let k2 = Int32 43 in *)
(* let v2 = "def" in *)
(* let m1 = builtin put m k1 v1 in *)
(* let m2 = builtin put m1 k2 v2 in *)
(* builtin to_list m2 *)



(******************************************************)
(*     Maps of closures are not supported yet!        *)
(******************************************************)

(* let m = Emp Int32 (String -> String) in *)
(* let k1 = Int32 42 in *)
(* let f = fun (s : String) => builtin concat s s in *)
(* let m1 = builtin put m k1 f in *)
(* m1 *)

